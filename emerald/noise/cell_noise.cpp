#include <emerald/noise/cell_noise.h>

namespace emerald {
namespace noise {

//-*****************************************************************************
float CellNoise(unsigned long int iSeeds[], int numSeeds) {
    unsigned long int _state = 0;
    unsigned long int seed = iSeeds[0];

    for (int i = 0; i < numSeeds; ++i) {
        seed = _state + iSeeds[i];
        _state = (seed * 0xa5a573a5L) ^ 0x5a5a5a5aL;
        _state = 1664525L * _state + 1013904223L;
    }

    // Generate a single-precision floating-point value between 0.0 and 1.0
    //
    // The exponent is set to 0x7f, which indicates a value greater than or
    // equal to 1.0, and less than 2.0. The 23 bits of the significand
    // (mantissa) are filled with pseudo-random bits generated by the above
    // hash. This results in bit patterns between 0x3f800000
    // and 0x3fffffff, which correspond to uniformly distributed floating-point
    // values between 1.0 and 1.99999988. Subtracting 1.0 from
    // those values produces numbers between 0.0 and 0.99999988, that is,
    // between 0.0 and 1.0-FLT_EPSILON

    union {
        float f;
        unsigned int i;
    } u;
    u.i = 0x3f800000 | (_state & 0x7fffff);

    // u.f comes out of the above procedure between 1.0 and 1.99999988
    // so mult by 2 and subtract 3 to range between -1 and 1.
    return (2.0f * u.f - 3.0f);
}

}  // End namespace noise
}  // End namespace emerald

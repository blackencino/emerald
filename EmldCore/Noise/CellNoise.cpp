//-*****************************************************************************
// Copyright (c) 2001-2013, Christopher Jon Horvath. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// 3. Neither the name of Christopher Jon Horvath nor the names of his
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-*****************************************************************************

#include "CellNoise.h"

namespace EmldCore {
namespace Noise {

//-*****************************************************************************
float CellNoise( unsigned long int iSeeds[], int numSeeds )
{
    unsigned long int _state = 0;
    unsigned long int seed = iSeeds[0];

    for ( int i = 0; i < numSeeds; ++i )
    {
        seed = _state + iSeeds[i];
        _state = (seed * 0xa5a573a5L) ^ 0x5a5a5a5aL;
        _state = 1664525L * _state + 1013904223L;
    }
    
    // Generate a single-precision floating-point value between 0.0 and 1.0
    //
    // The exponent is set to 0x7f, which indicates a value greater than or
    // equal to 1.0, and less than 2.0. The 23 bits of the significand
    // (mantissa) are filled with pseudo-random bits generated by the above
    // hash. This results in bit patterns between 0x3f800000
    // and 0x3fffffff, which correspond to uniformly distributed floating-point
    // values between 1.0 and 1.99999988. Subtracting 1.0 from
    // those values produces numbers between 0.0 and 0.99999988, that is,
    // between 0.0 and 1.0-FLT_EPSILON
    
    union { float f; unsigned int i; } u;
    u.i = 0x3f800000 | ( _state & 0x7fffff );

    // u.f comes out of the above procedure between 1.0 and 1.99999988
    // so mult by 2 and subtract 3 to range between -1 and 1.
    return ( 2.0f * u.f - 3.0f );
}   

} // End namespace Noise
} // End namespace EmldCore
